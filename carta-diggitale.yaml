esphome:
  name: carta-diggitale
  friendly_name: Carta Digitale
  on_boot:
    priority: -10
    then:
      #- delay: 10s
      #- component.update: epaper
      - display.page.show: page3
esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password    

api:
  encryption:
    key: !secret ha_api

ota:
  password: !secret ota

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14
  id: epaper_display

time:
- platform: homeassistant
  id: homeassistant_time
  timezone: Europe/London
  on_time:
    - seconds: 0
      minutes: /25
      then:
        #- display.page.show_next: epaper
        - display.page.show: page3
        - component.update: epaper


sun:
  latitude: !secret my_lat
  longitude: !secret my_long

json:

<<: !include .sensors.yaml
<<: !include .fonts.yaml

display:
  - platform: waveshare_epaper
    id: epaper  
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    model: 7.50inV2alt
    rotation: 90
    update_interval: never
    reset_duration: 4ms
    pages:
      - id: page1
        lambda: |-
          //ESP_LOGI("display", "Updating...");

          it.fill(COLOR_OFF);

          float livingroomtemp = id(livingroom_temp).state;
          float livingroomhum = id(livingroom_hum).state;
          float guestbedtemp = id(guestbed_temp).state;
          float guestbedhum = id(guestbed_hum).state;
          float kitchtemp = id(kitchen_temp).state;
          float kitchhum = id(kitchen_hum).state;
          float mastbedtemp = id(mastbed_temp).state;
          float mastbedhum = id(mastbed_hum).state;
          float attictemp = id(attic_temp).state;
          float attichum = id(attic_hum).state;
          float servertemp = id(server_temp).state;
          float serverhum = id(server_hum).state;
          float lgstudiotemp = id(lgstudio_temp).state;
          float lgstudiohum = id(lgstudio_hum).state;
          float alstudiotemp = id(alstudio_temp).state;
          float alstudiohum = id(alstudio_hum).state;

          float wind_now = id(windnow).state;
          float temp_now = id(tempnow).state;

          float storm_d0 = id(stormd0).state;
          float storm_d1 = id(stormd1).state;
          float storm_d2 = id(stormd2).state;

          std::string icolivingroom = "\uf4b8";
          std::string icoguestbed = "\uf44b";
          std::string icokitch = "\ue51a";
          std::string icomastbed = "\uf8f7";
          std::string icoattic = "\uf7d9";
          std::string icoserver = "\uf233";      
          std::string icolgstudio = "\ue4e5";
          std::string icoalstudio = "\uf109";

          std::string icotemp = "\uf2ca";
          std::string icohum = "\uf750";
          std::string icowind = "\uf72e";

          std::string icosunup = "\uf766";
          std::string icosundown = "\uf767";
          
          std::string sunrise = id(sunrise_hour).state;
          std::string sunset = id(sunset_hour).state;

          std::string icostorm = "\uf76c";
          
          std::map<std::string, std::string> weather_icon_state {
              {"cloudy", "\uf744"},
              {"clear-day", "\uf185"},
              {"clear-night", "\uf762"},
              {"fog", "\uf74e"},
              {"hail", "\uf739"},
              {"lightning", "\uf76c"},
              {"lightning-rainy", "\uf76e"},
              {"partly-cloudy-day", "\uf763"},
              {"pouring", "\uf740"},
              {"rain", "\uf73f"},
              {"snowy", "\uf2dc"},
              {"snowy-rainy", "\uf73d"},
              {"sunny", "\uf185"},
              {"sunset-down", "\uf767"},
              {"sunset-up", "\uf766"},
              {"windy", "\uf777"},
              {"windy-variant", "\uf6f4"}
          };

          int Ycenter = 240;
          int jawY = 725;
          int enwY = 365;
          int grid_thick = 2;

          int gridV1 = 60;
          int gridV2 = 180;
          int gridV3 = 300;
          int gridV4 = 420;

          int gridH1 = 40;
          int gridH2 = 240;

          int temp_ico_h1 = 90;
          int temp_txt_h1 = 120; 
          int hum_ico_h1 = 150;
          int hum_txt_h1 = 180;

          int temp_ico_h2 = 290;
          int temp_txt_h2 = 320;
          int hum_ico_h2 = 350;
          int hum_txt_h2 = 380;


          //GRID
          it.filled_rectangle(0, 0, 480, grid_thick);
          it.filled_rectangle(0, 200, 480, grid_thick);
          it.filled_rectangle(0, 400, 480, grid_thick);

          it.filled_rectangle(0, 0, grid_thick, 400);  
          it.filled_rectangle(120, 0, grid_thick, 400);
          it.filled_rectangle(Ycenter, 0, grid_thick, 400);
          it.filled_rectangle(360, 0, grid_thick, 400);      
          it.filled_rectangle(477, 0, grid_thick, 400);        

          it.filled_rectangle(160, 420, grid_thick, 230);
          it.filled_rectangle(320, 420, grid_thick, 230);

          //Living Room
          it.printf(gridV1, gridH1, id(icon_font), TextAlign::CENTER , icolivingroom.c_str());
          it.printf(gridV1, temp_ico_h1, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
          it.printf(gridV1, temp_txt_h1, id(font_bold), TextAlign::CENTER , "%.1f°C", livingroomtemp);
          it.printf(gridV1, hum_ico_h1, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
          it.printf(gridV1, hum_txt_h1, id(font_regular), TextAlign::CENTER , "%.1f%%", livingroomhum);

          //Gym
          it.printf(gridV2, gridH1, id(icon_font), TextAlign::CENTER , icoguestbed.c_str());
          it.printf(gridV2, temp_ico_h1, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
          it.printf(gridV2, temp_txt_h1, id(font_bold), TextAlign::CENTER , "%.1f°C", guestbedtemp);
          it.printf(gridV2, hum_ico_h1, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
          it.printf(gridV2, hum_txt_h1, id(font_regular), TextAlign::CENTER , "%.1f%%", guestbedhum);

          //Kitchen
          it.printf(gridV3, gridH1, id(icon_font), TextAlign::CENTER , icokitch.c_str());
          it.printf(gridV3, temp_ico_h1, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
          it.printf(gridV3, temp_txt_h1, id(font_bold), TextAlign::CENTER , "%.1f°C", kitchtemp);
          it.printf(gridV3, hum_ico_h1, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
          it.printf(gridV3, hum_txt_h1, id(font_regular), TextAlign::CENTER , "%.1f%%", kitchhum);      

          //Master Bedroom
          it.printf(gridV4, gridH1, id(icon_font), TextAlign::CENTER , icomastbed.c_str());
          it.printf(gridV4, temp_ico_h1, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
          it.printf(gridV4, temp_txt_h1, id(font_bold), TextAlign::CENTER , "%.1f°C", mastbedtemp);      
          it.printf(gridV4, hum_ico_h1, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
          it.printf(gridV4, hum_txt_h1, id(font_regular), TextAlign::CENTER , "%.1f%%", mastbedhum);

          //Attic
          it.printf(gridV1, gridH2, id(icon_font), TextAlign::CENTER , icoattic.c_str());
          it.printf(gridV1, temp_ico_h2, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
          it.printf(gridV1, temp_txt_h2, id(font_bold), TextAlign::CENTER , "%.1f°C", attictemp);
          it.printf(gridV1, hum_ico_h2, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
          it.printf(gridV1, hum_txt_h2, id(font_regular), TextAlign::CENTER , "%.1f%%", attichum);

          //Server
          it.printf(gridV2, gridH2 - 6, id(icon_font), TextAlign::CENTER , icoserver.c_str());
          it.printf(gridV2, temp_ico_h2, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
          it.printf(gridV2, temp_txt_h2, id(font_bold), TextAlign::CENTER , "%.1f°C", servertemp);
          it.printf(gridV2, hum_ico_h2, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
          it.printf(gridV2, hum_txt_h2, id(font_regular), TextAlign::CENTER , "%.1f%%", serverhum);

          //LG studio
          it.printf(gridV3, gridH2, id(icon_font), TextAlign::CENTER , icolgstudio.c_str());
          it.printf(gridV3, temp_ico_h2, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
          it.printf(gridV3, temp_txt_h2, id(font_bold), TextAlign::CENTER , "%.1f°C", lgstudiotemp);  
          it.printf(gridV3, hum_ico_h2, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
          it.printf(gridV3, hum_txt_h2, id(font_regular), TextAlign::CENTER , "%.1f%%", lgstudiohum);

          //AL Studio
          it.printf(gridV4, gridH2, id(icon_font), TextAlign::CENTER , icoalstudio.c_str());
          it.printf(gridV4, temp_ico_h2, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
          it.printf(gridV4, temp_txt_h2, id(font_bold), TextAlign::CENTER , "%.1f°C", alstudiotemp);
          it.printf(gridV4, hum_ico_h2, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
          it.printf(gridV4, hum_txt_h2, id(font_regular), TextAlign::CENTER , "%.1f%%", alstudiohum);

          
          //weather
          int stormvalue = 25;

          int weath_ico1 = 465;
          int weath_txt1 = 530;
          int weath_ico2 = 570;
          int weath_txt2 = 605;

          if (storm_d0 >= stormvalue || storm_d1 >= stormvalue || storm_d2 >= stormvalue){
            int weath_ico1 = 455;
            int weath_txt1 = 520;
            int weath_ico2 = 600;
            int weath_txt2 = 640;
          }
      
          int windshift = 13;

          float fore_neo_min1 = id(pwday1mintemp).state;
          float fore_neo_max1 = id(pwday1maxtemp).state;
          float fore_neo_wind1 = id(pwday1wind).state;
          float fore_neo_min2 = id(pwday2mintemp).state;
          float fore_neo_max2 = id(pwday2maxtemp).state;
          float fore_neo_wind2 = id(pwday2wind).state;    

          std::string weathday1condition = id(pwtodayicon).state;
          std::string weathday2condition = id(pwday1icon).state;
          std::string weathday3condition = id(pwday2icon).state;

          //Day0
          it.printf(80, weath_ico1, id(weather_font_big), TextAlign::CENTER, "%s", weather_icon_state[weathday1condition.c_str()].c_str());          
          it.printf(80, weath_txt1 - 5, id(font_date), TextAlign::CENTER, "%.1f°C", temp_now);
        
          it.printf(80, weath_ico2+windshift, id(wind_font), TextAlign::CENTER, icowind.c_str()); 
          it.printf(80, weath_txt2+windshift, id(font_bold), TextAlign::CENTER, "%.1f kmh", wind_now);

          //Day1        
          it.printf(240, weath_ico1, id(weather_font_big), TextAlign::CENTER, "%s", weather_icon_state[weathday2condition.c_str()].c_str());
          it.printf(240, weath_ico1+60, id(font_bold), TextAlign::CENTER, "%.0f° - %.0f°", fore_neo_min1, fore_neo_max1);

          it.printf(240, weath_txt2+windshift, id(font_bold), TextAlign::CENTER, "%.1f kmh", fore_neo_wind1);
          it.printf(240, weath_ico2+windshift, id(wind_font), TextAlign::CENTER, icowind.c_str()); 
          
          //Day 2
          it.printf(400, weath_ico1, id(weather_font_big), TextAlign::CENTER, "%s", weather_icon_state[weathday3condition.c_str()].c_str());
          it.printf(400, weath_ico1+60, id(font_bold), TextAlign::CENTER, "%.0f° - %.0f°", fore_neo_min2, fore_neo_max2);

          it.printf(400, weath_ico2+windshift, id(wind_font), TextAlign::CENTER, icowind.c_str());
          it.printf(400, weath_txt2+windshift, id(font_bold), TextAlign::CENTER, "%.1f kmh", fore_neo_wind2);

          //Lower Separator
          it.filled_rectangle(40, 660, 400, 3, COLOR_ON);

          //Date
          it.strftime(100, 710 , id(font_date), COLOR_ON, TextAlign::CENTER, "%B %d", id(homeassistant_time).now());
          it.strftime(100, 760 , id(font_date), COLOR_ON, TextAlign::CENTER, "%A", id(homeassistant_time).now());

          //Time
          //it.strftime(378, 730 , id(clockfont), TextAlign::CENTER, "%H:%M", id(homeassistant_time).now());

          //SUN
          it.printf(330, 710, id(sun_font), TextAlign::CENTER , icosunup.c_str());
          it.printf(400, 710, id(font_date), TextAlign::CENTER, "%s", sunrise.c_str());

          it.printf(330, 770, id(sun_font), TextAlign::CENTER , icosundown.c_str());
          it.printf(400, 770, id(font_date), TextAlign::CENTER, "%s", sunset.c_str());

          //Storm
          if (storm_d0 >= stormvalue){
            it.filled_rectangle(20, weath_ico2 - 65, 125, 40, COLOR_ON);
            it.printf(50, weath_ico2 - 45, id(icon_font_storm), COLOR_OFF, TextAlign::CENTER , icostorm.c_str());
            it.printf(100, weath_ico2 - 45, id(font_bold), COLOR_OFF, TextAlign::CENTER , "%.0f%%", storm_d0);
          }
          if (storm_d1 >= stormvalue){
            it.filled_rectangle(180, weath_ico2 - 65, 125, 40, COLOR_ON);
            it.printf(210, weath_ico2 - 45, id(icon_font_storm), COLOR_OFF, TextAlign::CENTER , icostorm.c_str());
            it.printf(260, weath_ico2 - 45, id(font_bold), COLOR_OFF, TextAlign::CENTER , "%.0f%%", storm_d1);      
          }
          if (storm_d2 >= stormvalue){
            it.filled_rectangle(340, weath_ico2 - 65, 125, 40, COLOR_ON);
            it.printf(370, weath_ico2 - 45, id(icon_font_storm), COLOR_OFF, TextAlign::CENTER , icostorm.c_str());
            it.printf(420, weath_ico2 - 45, id(font_bold), COLOR_OFF, TextAlign::CENTER , "%.0f%%", storm_d2);     
          }  
          
          //丸曜日
          //it.filled_circle(Ycenter, 730, 50);
          if (id(homeassistant_time).now().day_of_week == 1 || id(homeassistant_time).now().day_of_week == 7){ 
            it.filled_circle(Ycenter, 730, 50);
          }
          else{
            it.circle(Ycenter, 730, 50);
          }
          //何曜日？
          auto time_now = id(homeassistant_time).now().day_of_week;
            if (id(homeassistant_time).now().day_of_week == 1){ 
              it.printf(Ycenter, jawY, id(jaweekfont), COLOR_OFF, TextAlign::CENTER, "日");
            }      
            if (id(homeassistant_time).now().day_of_week == 2){ 
              it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "月");
            }
            if (id(homeassistant_time).now().day_of_week == 3){ 
              it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "火");
            }      
            if (id(homeassistant_time).now().day_of_week == 4){ 
              it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "水");
            }
            if (id(homeassistant_time).now().day_of_week == 5){ 
              it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "木");
            }      
            if (id(homeassistant_time).now().day_of_week == 6){ 
              it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "金");
            }
            if (id(homeassistant_time).now().day_of_week == 7){ 
              it.printf(Ycenter, jawY, id(jaweekfont), COLOR_OFF, TextAlign::CENTER, "土");
            }
      - id: page2
        lambda: |-
          //ESP_LOGI("display", "Updating...");
          it.printf(240, 450, id(font_date), TextAlign::CENTER, "Te se propi un pirla");

      - id: page3
        lambda: |-

          std::map<std::string, std::string> moonPhaseMap = {
              {"first_quarter", "First Quarter"},
              {"full_moon", "Full Moon!"},
              {"last_quarter", "Last Quarter"},
              {"new_moon", "New Moon!"},
              {"waning_crescent", "Waning Crescent"},
              {"waning_gibbous", "Waning Gibbous"},
              {"waxing_crescent", "Waxing Crescent"},
              {"waxing_gibbous", "Waxing Gibbous"}
          };

          float pw_moon_d0 = id(pwmoond0).state;
          float pw_moon_d1 = id(pwmoond1).state;
          float pw_moon_d2 = id(pwmoond2).state;
    
          // Define the moon phases and corresponding characters/strings
          std::map<double, std::pair<char, std::string>> moonPhases;

          // New Moon: Range from 0.00 to 0.125
          moonPhases[0.00] = {'+', "New Moon"};
          for (double phase = 0.001; phase <= 0.125; phase += 0.001) {
              moonPhases[phase] = {'+', "New Moon"};
          }

          // Waxing Crescent: Range from 0.125 to 0.25
          for (double phase = 0.126; phase <= 0.25; phase += 0.001) {
              moonPhases[phase] = {'q', "Waxing Crescent"};
          }

          // First Quarter: Range from 0.25 to 0.375
          for (double phase = 0.251; phase <= 0.375; phase += 0.001) {
              moonPhases[phase] = {'t', "First Quarter"};
          }

          // Waxing Gibbous: Range from 0.375 to 0.50
          for (double phase = 0.376; phase <= 0.50; phase += 0.001) {
              moonPhases[phase] = {'v', "Waxing Gibbous"};
          }

          // Full Moon: Range from 0.50 to 0.625
          for (double phase = 0.501; phase <= 0.625; phase += 0.001) {
              moonPhases[phase] = {'@', "Full Moon"};
          }

          // Waning Gibbous: Range from 0.625 to 0.75
          for (double phase = 0.626; phase <= 0.75; phase += 0.001) {
              moonPhases[phase] = {'d', "Waning Gibbous"};
          }

          // Last Quarter: Range from 0.75 to 0.875
          for (double phase = 0.751; phase <= 0.875; phase += 0.001) {
              moonPhases[phase] = {'g', "Last Quarter"};
          }

          // Waning Crescent: Range from 0.875 to 1.00
          for (double phase = 0.876; phase <= 1.00; phase += 0.001) {
              moonPhases[phase] = {'i', "Waning Crescent"};
          }

          // Assuming moonPhaseValueA, moonPhaseValueB, and moonPhaseValueC are the current moon phase values
          double moonPhaseValueA = pw_moon_d0;
          double moonPhaseValueB = pw_moon_d1;
          double moonPhaseValueC = pw_moon_d2;

          // Finding the closest moon phase for each value
          auto closestPhaseA = moonPhases.lower_bound(moonPhaseValueA);
          auto closestPhaseB = moonPhases.lower_bound(moonPhaseValueB);
          auto closestPhaseC = moonPhases.lower_bound(moonPhaseValueC);

          // Displaying the corresponding letters and strings
          char moonPhaseLetterA = closestPhaseA->second.first;
          std::string moonPhaseStringA = closestPhaseA->second.second;

          char moonPhaseLetterB = closestPhaseB->second.first;
          std::string moonPhaseStringB = closestPhaseB->second.second;

          char moonPhaseLetterC = closestPhaseC->second.first;
          std::string moonPhaseStringC = closestPhaseC->second.second;


          std::string moon_phase = id(moonphase).state;         

          //it.printf(240, 150, id(font_date), TextAlign::CENTER, "%.2f, %c, %s", moonPhaseValueA, moonPhaseLetterA, moonPhaseStringA.c_str());
          //it.printf(240, 250, id(moon_font_big), TextAlign::CENTER, "%c", moonPhaseLetterA);
          //it.circle(240, 250, 50);

          //it.printf(240, 350, id(font_date), TextAlign::CENTER, "%.2f, %c, %s", moonPhaseValueB, moonPhaseLetterB, moonPhaseStringB.c_str());
          //it.printf(240, 450, id(moon_font), TextAlign::CENTER, "%c", moonPhaseLetterB);
          //it.circle(240, 450, 40);

          //it.printf(240, 550, id(font_date), TextAlign::CENTER, "%.2f, %c, %s", moonPhaseValueC, moonPhaseLetterC, moonPhaseStringC.c_str());
          //it.printf(240, 650, id(moon_font), TextAlign::CENTER, "%c", moonPhaseLetterC);
          //it.circle(240, 650, 40);

          it.printf(240, 150, id(font_date), TextAlign::CENTER, "%s", moonPhaseStringA.c_str());
          it.printf(240, 240, id(moon_font_big), TextAlign::CENTER, "%c", moonPhaseLetterA);
          it.circle(240, 240, 50);

          it.printf(240, 370, id(font_date), TextAlign::CENTER, "%s", moonPhaseStringB.c_str());
          it.printf(240, 440, id(moon_font), TextAlign::CENTER, "%c", moonPhaseLetterB);
          it.circle(240, 440, 40);

          it.printf(240, 570, id(font_date), TextAlign::CENTER, "%s", moonPhaseStringC.c_str());
          it.printf(240, 640, id(moon_font), TextAlign::CENTER, "%c", moonPhaseLetterC);
          it.circle(240, 640, 40);          



