
esphome:
  name: milandicarta
  friendly_name: MilanDiCarta
  on_boot:
    priority: -100
    then:
      - delay: 10s
      - component.update: epaper  

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

ota:
  password: !secret ota

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password    

api:
  encryption:
    key: !secret apikey
    
script:
  - id: update_screen
    then:
      - component.update: epaper
      #- lambda: 'id(recorded_display_refresh) += 1;'
      #- lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'

time:
- platform: homeassistant
  id: homeassistant_time
  timezone: Europe/Rome
  on_time:
    - seconds: 0
      minutes: /50
      then:
        - script.execute: update_screen

sun:
  latitude: !secret mi_lat
  longitude: !secret mi_long

json:

<<: !include .fonts.yaml
<<: !include .sensors.yaml

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

display:
  - platform: waveshare_epaper
    id: epaper
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    model: 7.50inV2alt
    rotation: 90
    update_interval: never
    reset_duration: 2ms
    
    lambda: |-
      //it.fill(COLOR_OFF);
      
      float temp_now = id(tempnow).state;
      float wind_now = id(windnow).state;

      float fore_min_d1 = id(foremind1).state;
      float fore_min_d2 = id(foremind2).state;
      float fore_max_d1 = id(foremaxd1).state;
      float fore_max_d2 = id(foremaxd2).state;

      float fore_wind_d1 = id(forewindd1).state;
      float fore_wind_d2 = id(forewindd2).state;
      
      int Ycenter = 240;
      int Hend = 480;
      int Hstart = 0;
      int Yend = 725;
      int Ystart = 0;
      int enwY = 365;
      int grid_thick = 2;

      int milanes_h = 170;
      int milanes_secondline = 55;

      int col_uno = 80;
      int col_due = 240;
      int col_tre = 400;

      int meseX = 140;
      int meseY = 40;

      int giornoX = 140;
      int giornoY = 90;

      float temparmeno = id(temp_armeno).state;
      float temprapallo = id(temp_rapallo).state;
      float tempedinburgh = id(temp_edinburgh).state;
      float windarmeno = id(wind_armeno).state;
      float windrapallo = id(wind_rapallo).state;
      float windedinburgh = id(wind_edinburgh).state;

      int weath_ico1 = 305;
      int weath_txt1 = 370;
      int weath_ico2 = 410;
      int weath_txt2 = 445;
      int weath_ico3 = 535;

      int sens_title = 505;
      int casae_title = 575;

      std::string sunrise = id(sunrise_hour).state;
      std::string sunset = id(sunset_hour).state;

      std::string icostorm = "\U000F067E";
      std::string icotemp = "\U000F050F";
      std::string icohum = "\U000F058E";
      std::string icowind = "\U000F059D";
      std::string icosunup = "\U000F059C";
      std::string icosundown = "\U000F059B";
      
      std::map<std::string, std::string> weather_icon_state {
          {"cloudy", "\U000F0590"},
          {"clear-day", "\U000F0599"},
          {"clear-night", "\U000F0594"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"partlycloudy", "\U000F0595"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"}
      };


      //weather 
      DynamicJsonDocument doc(2048);
      DynamicJsonDocument docar(2048);
      DynamicJsonDocument docra(2048);
      DynamicJsonDocument doced(2048);

      deserializeJson(doc, (id(accuweatherfore).state.c_str()));
      JsonArray root = doc.as<JsonArray>();
      
      deserializeJson(docar, (id(weather_armeno).state.c_str()));
      JsonArray rootar = docar.as<JsonArray>();
      
      deserializeJson(docra, (id(weather_rapallo).state.c_str()));
      JsonArray rootra = docra.as<JsonArray>();
      
      deserializeJson(doced, (id(weather_edinburgh).state.c_str()));
      JsonArray rooted = doced.as<JsonArray>();


      JsonObject root_0 = root[0];
      JsonObject root_1 = root[1];
      JsonObject root_2 = root[2];
      std::string root_0_condition = root_0["condition"];
      std::string root_1_condition = root_1["condition"];
      std::string root_2_condition = root_2["condition"];

      float root_0_temperature = root_0["temperature"];
      float root_1_temperature = root_1["temperature"];
      float root_2_temperature = root_2["temperature"];
      

      JsonObject root_ar = rootar[0];
      std::string root_ar_condition = root_ar["condition"];

      JsonObject root_ra = rootra[0];
      std::string root_ra_condition = root_ra["condition"];

      JsonObject root_ed = rooted[0];
      std::string root_ed_condition = root_ed["condition"];      

      float root_0_wind = root_0["wind_speed"];
      float root_1_wind = root_1["wind_speed"];
      float root_2_wind = root_2["wind_speed"];

      float root_1_templow = root_1["templow"];
      float root_2_templow = root_2["templow"];

      std::string armeno_cond_neo = id(armenocondneo).state;
      std::string rapallo_cond_neo = id(rapallocondneo).state;
      std::string edi_cond_neo = id(edicondneo).state;

      //Weather CasaCaseItalia
      it.printf(col_uno, casae_title, id(font_bold), TextAlign::CENTER, "Armeno");
      it.printf(col_due, casae_title, id(font_bold), TextAlign::CENTER, "Rapallo");
      it.printf(col_tre, casae_title, id(font_bold), TextAlign::CENTER, "Edinburgh");

      it.printf(col_uno, casae_title+47, id(weather_font_small), TextAlign::CENTER, "%s", weather_icon_state[armeno_cond_neo.c_str()].c_str());
      it.printf(col_uno, casae_title+95, id(font_bold), TextAlign::CENTER, "%.1f°C", temparmeno);

      it.printf(col_due, casae_title+47, id(weather_font_small), TextAlign::CENTER, "%s", weather_icon_state[rapallo_cond_neo.c_str()].c_str());
      it.printf(col_due, casae_title+95, id(font_bold), TextAlign::CENTER, "%.1f°C", temprapallo);

      it.printf(col_tre, casae_title+47, id(weather_font_small), TextAlign::CENTER, "%s", weather_icon_state[edi_cond_neo.c_str()].c_str());
      it.printf(col_tre, casae_title+95, id(font_bold), TextAlign::CENTER, "%.1f°C", tempedinburgh);


      it.printf(col_uno, casae_title+150, id(wind_font), TextAlign::CENTER, icowind.c_str());
      it.printf(col_uno, casae_title+190, id(font_bold), TextAlign::CENTER, "%.1f kmh", windarmeno);

      it.printf(col_due, casae_title+150, id(wind_font), TextAlign::CENTER, icowind.c_str());
      it.printf(col_due, casae_title+190, id(font_bold), TextAlign::CENTER, "%.1f kmh", windrapallo);

      it.printf(col_tre, casae_title+150, id(wind_font), TextAlign::CENTER, icowind.c_str());
      it.printf(col_tre, casae_title+190, id(font_bold), TextAlign::CENTER, "%.1f kmh", windedinburgh);



      std::string weathday1condition = id(accucond1).state;
      std::string weathday2condition = id(accucond2).state;
      std::string weathday3condition = id(accucond3).state;



      //Day0
      it.printf(col_uno, weath_ico1, id(weather_font_85), TextAlign::CENTER, "%s", weather_icon_state[weathday1condition.c_str()].c_str());          
      it.printf(col_uno, weath_txt1 - 5, id(font_date), TextAlign::CENTER, "%.1f°C", temp_now);
    
      it.printf(col_uno, weath_ico2, id(wind_font), TextAlign::CENTER, icowind.c_str()); 
      it.printf(col_uno, weath_txt2 , id(font_bold), TextAlign::CENTER, "%.1f kmh", wind_now);

      //Day1
      it.printf(col_due, weath_ico1, id(weather_font_85), TextAlign::CENTER, "%s", weather_icon_state[weathday2condition.c_str()].c_str());
      it.printf(col_due, weath_ico1+60, id(font_bold), TextAlign::CENTER, "%.0f°   %.0f°", fore_min_d1, fore_max_d1);

      it.printf(col_due, weath_txt2, id(font_bold), TextAlign::CENTER, "%.1f kmh", fore_wind_d1);
      it.printf(col_due, weath_ico2, id(wind_font), TextAlign::CENTER, icowind.c_str()); 
      
      //Day 2
      it.printf(col_tre, weath_ico1, id(weather_font_85), TextAlign::CENTER, "%s", weather_icon_state[weathday3condition.c_str()].c_str());
      it.printf(col_tre, weath_ico1+60, id(font_bold), TextAlign::CENTER, "%.0f°   %.0f°", fore_min_d2, fore_max_d2);

      it.printf(col_tre, weath_ico2, id(wind_font), TextAlign::CENTER, icowind.c_str());
      it.printf(col_tre, weath_txt2, id(font_bold), TextAlign::CENTER, "%.1f kmh", fore_wind_d2);


      it.printf(col_uno, 490, id(font_bold), TextAlign::CENTER, "Oggi");
      it.printf(col_due, 490, id(font_bold), TextAlign::CENTER, "Domani");
      it.printf(col_tre, 490, id(font_bold), TextAlign::CENTER, "Dopo");
      
      //GRID
      it.filled_rectangle(Hstart+30, 530, Hend-60, grid_thick);


        auto time_now = id(homeassistant_time).now().day_of_week;
        if (id(homeassistant_time).now().day_of_week == 1){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "Senza danee i prét");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "no canten messa");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Domenega %d", id(homeassistant_time).now());
        }      
        if (id(homeassistant_time).now().day_of_week == 2){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "El fumm el va in aria");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "e l’acqua la corr in giò");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Lunedì %d", id(homeassistant_time).now());
        }
        if (id(homeassistant_time).now().day_of_week == 3){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "A fà polenta ghe vœur");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "l’oli de gómbed");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Martedì %d", id(homeassistant_time).now());
        }      
        if (id(homeassistant_time).now().day_of_week == 4){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "La nostra fortunna se");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "la femm nun de per nun");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Mercoldì %d", id(homeassistant_time).now());
        }
        if (id(homeassistant_time).now().day_of_week == 5){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "La legge è uguale");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "per tutti... i strascion");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Giovedì %d", id(homeassistant_time).now());
        }      
        if (id(homeassistant_time).now().day_of_week == 6){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "A sto mond l’è inscí:");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "o ingannà o vess ingannaa");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Venerdì %d", id(homeassistant_time).now());
        }
        if (id(homeassistant_time).now().day_of_week == 7){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "A fà divers di olter ");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "se ciappa-sù del matt");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Sabet %d", id(homeassistant_time).now());
        }

      auto time_mnow = id(homeassistant_time).now().month;
        if (id(homeassistant_time).now().month == 1){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Genár");
        }
        if (id(homeassistant_time).now().month == 2){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Febrar");
        }
        if (id(homeassistant_time).now().month == 3){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Márz");
        }  
        if (id(homeassistant_time).now().month == 4){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "April");
        }
        if (id(homeassistant_time).now().month == 5){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Màgg");
        }
        if (id(homeassistant_time).now().month == 6){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Giùgn");
        }
        if (id(homeassistant_time).now().month == 7){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Luj");
        }                             
        if (id(homeassistant_time).now().month == 8){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Agost");
        }   
        if (id(homeassistant_time).now().month == 9){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Setémber");
        }
        if (id(homeassistant_time).now().month == 10){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Ottober");
        }
        if (id(homeassistant_time).now().month == 11){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Novémber");
        }    
        if (id(homeassistant_time).now().month == 12){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Dicémber");
        } 

      //SUN
      it.printf(320, 45, id(sun_font), TextAlign::CENTER , icosunup.c_str());
      it.printf(400, 40, id(font_sun_txt), TextAlign::CENTER, "%s", sunrise.c_str());

      it.printf(320, 100, id(sun_font), TextAlign::CENTER , icosundown.c_str());
      it.printf(400, 95, id(font_sun_txt), TextAlign::CENTER, "%s", sunset.c_str());
