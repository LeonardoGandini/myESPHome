esphome:
  name: champa-di-carta
  friendly_name: Champa di Carta

esp32:
  board: esp32dev
  framework:
    type: arduino
    
logger:

api:
  encryption:
    key: !secret champa_ha_api

ota:
  password: !secret champa_ota

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret champa_wifi_ssid
      password: !secret champa_wifi_password      

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14
  id: epaper_display

time:
- platform: homeassistant
  id: homeassistant_time
  timezone: Europe/London

sun:
  latitude: !secret champa_lat
  longitude: !secret champa_long

json:

<<: !include .fontschampa.yaml
<<: !include .champa_sensors.yaml

display:
  
  - platform: waveshare_epaper
    id: epaper  
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    model: 7.50inV2alt
    rotation: 90
    update_interval: 1min
    reset_duration: 4ms

    lambda: |-
      it.fill(COLOR_OFF);

      float wind_now = id(windnow).state;
      float temp_now = id(tempnow).state;

      float storm_d0 = id(stormd0).state;
      float storm_d1 = id(stormd1).state;
      float storm_d2 = id(stormd2).state;

      std::string sunrise = id(sunrise_hour).state;
      std::string sunset = id(sunset_hour).state;

      std::string icostorm = "\U000F067E";
      std::string icotemp = "\U000F050F";
      std::string icohum = "\U000F058E";
      std::string icowind = "\U000F059D";
      std::string icosunup = "\U000F059C";
      std::string icosundown = "\U000F059B";
      
      std::map<std::string, std::string> weather_icon_state {
          {"cloudy", "\U000F0590"},
          {"clear-day", "\U000F0599"},
          {"clear-night", "\U000F0594"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"partlycloudy", "\U000F0595"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"}
      };

      int Ycenter = 240;
      int Hend = 480;
      int Hstart = 0;
      int Yend = 725;
      int Ystart = 0;
      int enwY = 365;
      int grid_thick = 2;

      int milanes_h = 160;
      int milanes_secondline = 35;

      //GRID
      //verticali
      it.filled_rectangle(160, 250, grid_thick, 410);
      it.filled_rectangle(320, 250, grid_thick, 410);

      //it.filled_rectangle(Ycenter, 600, grid_thick, Yend);
      
      //orizzontali
      it.filled_rectangle(Hstart, 250, Hend, grid_thick);
      it.filled_rectangle(Hstart, 480, Hend, grid_thick);
      it.filled_rectangle(Hstart, 660, Hend, grid_thick);

      //it.filled_rectangle(Hstart, (Yend-600)/2, Hend, grid_thick);
      
      int meseX = 140;
      int meseY = 40;

      int giornoX = 140;
      int giornoY = 90;
      
      //Date
      //it.strftime(140, 40 , id(font_date), COLOR_ON, TextAlign::CENTER, "%B %d", id(homeassistant_time).now());
      //it.strftime(140, 90 , id(font_date), COLOR_ON, TextAlign::CENTER, "%A", id(homeassistant_time).now());
      //it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::LEFT, "%d", id(homeassistant_time).now());

      auto time_now = id(homeassistant_time).now().day_of_week;
        if (id(homeassistant_time).now().day_of_week == 1){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Domenega %d", id(homeassistant_time).now());
        }      
        if (id(homeassistant_time).now().day_of_week == 2){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Lunedì %d", id(homeassistant_time).now());
        }
        if (id(homeassistant_time).now().day_of_week == 3){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Martedì %d", id(homeassistant_time).now());
        }      
        if (id(homeassistant_time).now().day_of_week == 4){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Mercoldì %d", id(homeassistant_time).now());
        }
        if (id(homeassistant_time).now().day_of_week == 5){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Giovedì %d", id(homeassistant_time).now());
        }      
        if (id(homeassistant_time).now().day_of_week == 6){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Venerdì %d", id(homeassistant_time).now());
        }
        if (id(homeassistant_time).now().day_of_week == 7){ 
          it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.printf(Ycenter, milanes_h + milanes_secondline, id(font_milanes), COLOR_ON, TextAlign::CENTER, "");
          it.strftime(giornoX, giornoY, id(font_date), COLOR_ON, TextAlign::CENTER, "Sabet %d", id(homeassistant_time).now());
        }

      auto time_mnow = id(homeassistant_time).now().month;
        if (id(homeassistant_time).now().month == 1){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Genár");
        }
        if (id(homeassistant_time).now().month == 2){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Febrar");
        }
        if (id(homeassistant_time).now().month == 3){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Márz");
        }  
        if (id(homeassistant_time).now().month == 4){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "April");
        }
        if (id(homeassistant_time).now().month == 5){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Màgg");
        }
        if (id(homeassistant_time).now().month == 6){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Giùgn");
        }
         if (id(homeassistant_time).now().month == 7){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Luj");
        }                             
        if (id(homeassistant_time).now().month == 8){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Agost");
        }   
        if (id(homeassistant_time).now().month == 9){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Setémber");
        }
        if (id(homeassistant_time).now().month == 10){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Ottober");
        }
        if (id(homeassistant_time).now().month == 11){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Novémber");
        }    
        if (id(homeassistant_time).now().month == 12){ 
          it.printf(meseX, meseY , id(font_date), COLOR_ON, TextAlign::CENTER, "Dicémber");
        } 


      //SUN
      it.printf(320, 45, id(sun_font), TextAlign::CENTER , icosunup.c_str());
      it.printf(400, 40, id(font_sun_txt), TextAlign::CENTER, "%s", sunrise.c_str());

      it.printf(320, 100, id(sun_font), TextAlign::CENTER , icosundown.c_str());
      it.printf(400, 95, id(font_sun_txt), TextAlign::CENTER, "%s", sunset.c_str());

      it.printf(Ycenter, milanes_h, id(font_milanes), COLOR_ON, TextAlign::CENTER, "Senza danee i prét");
      it.printf(Ycenter, milanes_h + 40, id(font_milanes), COLOR_ON, TextAlign::CENTER, "no canten messa");
      

      if (id(binariodiprova).state) {
        it.printf(Ycenter, 740, id(font_spazza), COLOR_ON, TextAlign::CENTER, "Domani raccolgono il riciclo");
      }
     //it.printf(Ycenter, 750, id(font_spazza), COLOR_ON, TextAlign::CENTER, "Domani vengono i giardinieri");



      //weather
      int stormvalue = 25;

      int weath_ico1 = 305;
      int weath_txt1 = 370;
      int weath_ico2 = 410;
      int weath_txt2 = 445;

      if (storm_d0 >= stormvalue || storm_d1 >= stormvalue || storm_d2 >= stormvalue){
        int weath_ico1 = 455;
        int weath_txt1 = 520;
        int weath_ico2 = 600;
        int weath_txt2 = 635;
      }
  
      DynamicJsonDocument doc(2048);
      deserializeJson(doc, (id(accuweatherfore).state.c_str()));
      JsonArray root = doc.as<JsonArray>();

      JsonObject root_0 = root[0];
      JsonObject root_1 = root[1];
      JsonObject root_2 = root[2];
      std::string root_0_condition = root_0["condition"];
      std::string root_1_condition = root_1["condition"];
      std::string root_2_condition = root_2["condition"];
      float root_0_temperature = root_0["temperature"];
      float root_1_temperature = root_1["temperature"];
      float root_2_temperature = root_2["temperature"];

      float root_0_wind = root_0["wind_speed"];
      float root_1_wind = root_1["wind_speed"];
      float root_2_wind = root_2["wind_speed"];

      float root_1_templow = root_1["templow"];
      float root_2_templow = root_2["templow"];

      int col_uno = 80;
      int col_due = 240;
      int col_tre = 400;

      //Day0
      it.printf(col_uno, weath_ico1, id(weather_font_85), TextAlign::CENTER, "%s", weather_icon_state[root_0_condition.c_str()].c_str());          
      it.printf(col_uno, weath_txt1 - 5, id(font_date), TextAlign::CENTER, "%.1f°C", temp_now);
    
      it.printf(col_uno, weath_ico2, id(wind_font), TextAlign::CENTER, icowind.c_str()); 
      it.printf(col_uno, weath_txt2 , id(font_bold), TextAlign::CENTER, "%.1f kmh", wind_now);

      //Day1
      it.printf(col_due, weath_ico1, id(weather_font_85), TextAlign::CENTER, "%s", weather_icon_state[root_1_condition.c_str()].c_str());
      it.printf(col_due, weath_ico1+60, id(font_bold), TextAlign::CENTER, "%.0f° - %.0f°", root_1_templow, root_1_temperature);

      it.printf(col_due, weath_txt2, id(font_bold), TextAlign::CENTER, "%.1f kmh", root_1_wind);
      it.printf(col_due, weath_ico2, id(wind_font), TextAlign::CENTER, icowind.c_str()); 
      
      //Day 2
      it.printf(col_tre, weath_ico1, id(weather_font_85), TextAlign::CENTER, "%s", weather_icon_state[root_2_condition.c_str()].c_str());
      it.printf(col_tre, weath_ico1+60, id(font_bold), TextAlign::CENTER, "%.0f° - %.0f°", root_2_templow, root_2_temperature);

      it.printf(col_tre, weath_ico2, id(wind_font), TextAlign::CENTER, icowind.c_str());
      it.printf(col_tre, weath_txt2, id(font_bold), TextAlign::CENTER, "%.1f kmh", root_2_wind);

      int sens_title = 505;
      it.printf(col_uno, sens_title, id(font_bold), TextAlign::CENTER, "Boiler");
      it.printf(col_due, sens_title, id(font_bold), TextAlign::CENTER, "Bedroom");
      it.printf(col_tre, sens_title, id(font_bold), TextAlign::CENTER, "Attic");


      float kitchtemp = id(kitchen_temp).state;
      float kitchhum = id(kitchen_hum).state;

      //Kitchen
      it.printf(col_uno, sens_title+40, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
      it.printf(col_uno, sens_title+70, id(font_bold), TextAlign::CENTER , "%.1f°C", kitchtemp);
      it.printf(col_uno, sens_title+100, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
      it.printf(col_uno, sens_title+125, id(font_regular), TextAlign::CENTER , "%.1f%%", kitchhum);  

      it.printf(col_due, sens_title+40, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
      it.printf(col_due, sens_title+70, id(font_bold), TextAlign::CENTER , "%.1f°C", kitchtemp);
      it.printf(col_due, sens_title+100, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
      it.printf(col_due, sens_title+125, id(font_regular), TextAlign::CENTER , "%.1f%%", kitchhum);  

      it.printf(col_tre, sens_title+40, id(icon_font_small), TextAlign::CENTER , icotemp.c_str());
      it.printf(col_tre, sens_title+70, id(font_bold), TextAlign::CENTER , "%.1f°C", kitchtemp);
      it.printf(col_tre, sens_title+100, id(icon_font_small), TextAlign::CENTER , icohum.c_str());
      it.printf(col_tre, sens_title+125, id(font_regular), TextAlign::CENTER , "%.1f%%", kitchhum);  